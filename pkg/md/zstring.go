// Code generated by "stringer -type=OpType,InlineOpType -output=zstring.go"; DO NOT EDIT.

package md

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpThematicBreak-0]
	_ = x[OpHeading-1]
	_ = x[OpCodeBlock-2]
	_ = x[OpHTMLBlock-3]
	_ = x[OpParagraph-4]
	_ = x[OpBlockquoteStart-5]
	_ = x[OpBlockquoteEnd-6]
	_ = x[OpListItemStart-7]
	_ = x[OpListItemEnd-8]
	_ = x[OpBulletListStart-9]
	_ = x[OpBulletListEnd-10]
	_ = x[OpOrderedListStart-11]
	_ = x[OpOrderedListEnd-12]
}

const _OpType_name = "OpThematicBreakOpHeadingOpCodeBlockOpHTMLBlockOpParagraphOpBlockquoteStartOpBlockquoteEndOpListItemStartOpListItemEndOpBulletListStartOpBulletListEndOpOrderedListStartOpOrderedListEnd"

var _OpType_index = [...]uint8{0, 15, 24, 35, 46, 57, 74, 89, 104, 117, 134, 149, 167, 183}

func (i OpType) String() string {
	if i >= OpType(len(_OpType_index)-1) {
		return "OpType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpType_name[_OpType_index[i]:_OpType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OpText-0]
	_ = x[OpCodeSpan-1]
	_ = x[OpRawHTML-2]
	_ = x[OpNewLine-3]
	_ = x[OpEmphasisStart-4]
	_ = x[OpEmphasisEnd-5]
	_ = x[OpStrongEmphasisStart-6]
	_ = x[OpStrongEmphasisEnd-7]
	_ = x[OpLinkStart-8]
	_ = x[OpLinkEnd-9]
	_ = x[OpImage-10]
	_ = x[OpAutolink-11]
	_ = x[OpHardLineBreak-12]
}

const _InlineOpType_name = "OpTextOpCodeSpanOpRawHTMLOpNewLineOpEmphasisStartOpEmphasisEndOpStrongEmphasisStartOpStrongEmphasisEndOpLinkStartOpLinkEndOpImageOpAutolinkOpHardLineBreak"

var _InlineOpType_index = [...]uint8{0, 6, 16, 25, 34, 49, 62, 83, 102, 113, 122, 129, 139, 154}

func (i InlineOpType) String() string {
	if i >= InlineOpType(len(_InlineOpType_index)-1) {
		return "InlineOpType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _InlineOpType_name[_InlineOpType_index[i]:_InlineOpType_index[i+1]]
}
